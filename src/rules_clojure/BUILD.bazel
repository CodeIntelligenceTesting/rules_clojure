package(default_visibility = ["//visibility:public"])

load("//:rules.bzl", "clojure_binary", "clojure_library")

exports_files(glob(["*.clj"]))

java_library(
    name = "jar-lib-bootstrap",
    resource_strip_prefix = "src",
    resources = [
        "compile.clj",
        "fs.clj",
        "jar.clj",
    ],
    runtime_deps = [
        "//java/rules_clojure:worker_java_proto",
        "@rules_clojure_maven//:org_clojure_clojure",
        "@rules_clojure_maven//:org_clojure_core_specs_alpha",
        "@rules_clojure_maven//:org_clojure_data_json",
        "@rules_clojure_maven//:org_clojure_java_classpath",
        "@rules_clojure_maven//:org_clojure_spec_alpha",
        "@rules_clojure_maven//:org_clojure_tools_namespace",
    ],
)

clojure_library(
    name = "jar-lib",
    aot = [
        "clojure.tools.namespace.find",
        "clojure.tools.namespace.dependency",
        "clojure.tools.namespace.track",
        "clojure.tools.reader.default-data-readers",
        "clojure.tools.reader.impl.commons",
        "clojure.tools.reader.impl.inspect",
        "clojure.tools.reader.impl.errors",
        "clojure.tools.reader.impl.utils",
        "clojure.tools.reader.reader-types",
        "clojure.tools.reader",
        "clojure.tools.namespace.parse",
        "clojure.tools.namespace.file",
        "clojure.java.classpath",
        "clojure.data.json",
        "rules-clojure.jar",
        "rules-clojure.fs",
    ],
    jar_runtime = [
        "@rules_clojure_maven//:org_projectodd_shimdandy_shimdandy_impl",
        "@rules_clojure//src/rules_clojure:jar-lib-bootstrap",
    ],
    resources = [
        "compile.clj",
        "fs.clj",
    ],
    deps = [
        "jar-lib-bootstrap",
    ],
)

clojure_library(
    name = "libgen_build",
    srcs = [
        "fs.clj",
        "gen_build.clj",
        "parse.clj",
    ],
    aot = [
        "clojure.java.classpath",
        "clojure.tools.deps.alpha.extensions",
        "clojure.tools.deps.alpha.util.session",
        "clojure.tools.deps.alpha.util.io",
        "clojure.tools.deps.alpha.util.dir",
        "clojure.tools.deps.alpha.util.concurrent",
        "clojure.tools.deps.alpha",
        "clojure.tools.reader.default-data-readers",
        "clojure.tools.reader.impl.commons",
        "clojure.tools.reader.impl.inspect",
        "clojure.tools.reader.impl.errors",
        "clojure.tools.reader.impl.utils",
        "clojure.tools.reader.reader-types",
        "clojure.tools.reader",
        "clojure.tools.namespace.parse",
        "clojure.tools.namespace.dependency",
        "clojure.tools.namespace.track",
        "clojure.tools.namespace.file",
        "clojure.tools.namespace.find",
        "rules-clojure.gen-build",
        "rules-clojure.parse",
        "rules-clojure.fs",
    ],
    resource_strip_prefix = "src",
    deps = [
        "@rules_clojure_maven//:org_clojure_clojure",
        "@rules_clojure_maven//:org_clojure_core_specs_alpha",
        "@rules_clojure_maven//:org_clojure_data_json",
        "@rules_clojure_maven//:org_clojure_spec_alpha",
        "@rules_clojure_maven//:org_clojure_tools_deps_alpha",
        "@rules_clojure_maven//:org_clojure_tools_namespace",
    ],
)

java_binary(
    name = "gen_build",
    main_class = "rules_clojure.gen_build",
    runtime_deps = [":libgen_build"],
)

clojure_library(
    name = "testrunner",
    srcs = ["testrunner.clj"],
    aot = ["rules-clojure.testrunner"],
    resource_strip_prefix = "src",
)
